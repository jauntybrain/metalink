// Mocks generated by Mockito 5.4.5 from annotations
// in metalink/test/core/metadata_extractor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i8;

import 'package:http/http.dart' as _i2;
import 'package:metalink/src/core/image_url_analyzer.dart' as _i9;
import 'package:metalink/src/core/metadata_cache.dart' as _i10;
import 'package:metalink/src/core/url_optimizer.dart' as _i3;
import 'package:metalink/src/models/image_metadata.dart' as _i4;
import 'package:metalink/src/models/link_metadata.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUrlOptimizationResult_3 extends _i1.SmartFake
    implements _i3.UrlOptimizationResult {
  _FakeUrlOptimizationResult_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeImageMetadata_4 extends _i1.SmartFake implements _i4.ImageMetadata {
  _FakeImageMetadata_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
        Invocation.method(#head, [url], {#headers: headers}),
        returnValue: _i5.Future<_i2.Response>.value(
          _FakeResponse_0(
            this,
            Invocation.method(#head, [url], {#headers: headers}),
          ),
        ),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
        Invocation.method(#get, [url], {#headers: headers}),
        returnValue: _i5.Future<_i2.Response>.value(
          _FakeResponse_0(
            this,
            Invocation.method(#get, [url], {#headers: headers}),
          ),
        ),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {#headers: headers, #body: body, #encoding: encoding},
        ),
        returnValue: _i5.Future<_i2.Response>.value(
          _FakeResponse_0(
            this,
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
          ),
        ),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {#headers: headers, #body: body, #encoding: encoding},
        ),
        returnValue: _i5.Future<_i2.Response>.value(
          _FakeResponse_0(
            this,
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
          ),
        ),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {#headers: headers, #body: body, #encoding: encoding},
        ),
        returnValue: _i5.Future<_i2.Response>.value(
          _FakeResponse_0(
            this,
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
          ),
        ),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {#headers: headers, #body: body, #encoding: encoding},
        ),
        returnValue: _i5.Future<_i2.Response>.value(
          _FakeResponse_0(
            this,
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
          ),
        ),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
        Invocation.method(#read, [url], {#headers: headers}),
        returnValue: _i5.Future<String>.value(
          _i7.dummyValue<String>(
            this,
            Invocation.method(#read, [url], {#headers: headers}),
          ),
        ),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i8.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#readBytes, [url], {#headers: headers}),
        returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(#send, [request]),
        returnValue: _i5.Future<_i2.StreamedResponse>.value(
          _FakeStreamedResponse_1(
            this,
            Invocation.method(#send, [request]),
          ),
        ),
      ) as _i5.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(#close, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UrlOptimizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlOptimizer extends _i1.Mock implements _i3.UrlOptimizer {
  MockUrlOptimizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
      ) as bool);

  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);

  @override
  Duration get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: _FakeDuration_2(this, Invocation.getter(#timeout)),
      ) as Duration);

  @override
  _i5.Future<_i3.UrlOptimizationResult> optimize(String? url) =>
      (super.noSuchMethod(
        Invocation.method(#optimize, [url]),
        returnValue: _i5.Future<_i3.UrlOptimizationResult>.value(
          _FakeUrlOptimizationResult_3(
            this,
            Invocation.method(#optimize, [url]),
          ),
        ),
      ) as _i5.Future<_i3.UrlOptimizationResult>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ImageUrlAnalyzer].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageUrlAnalyzer extends _i1.Mock implements _i9.ImageUrlAnalyzer {
  MockImageUrlAnalyzer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: _FakeDuration_2(this, Invocation.getter(#timeout)),
      ) as Duration);

  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
      ) as bool);

  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);

  @override
  bool get checkDimensions => (super.noSuchMethod(
        Invocation.getter(#checkDimensions),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<_i4.ImageMetadata> analyze(
    String? imageUrl, {
    String? sourceDomain,
    bool? fetchHeaders = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyze,
          [imageUrl],
          {#sourceDomain: sourceDomain, #fetchHeaders: fetchHeaders},
        ),
        returnValue: _i5.Future<_i4.ImageMetadata>.value(
          _FakeImageMetadata_4(
            this,
            Invocation.method(
              #analyze,
              [imageUrl],
              {#sourceDomain: sourceDomain, #fetchHeaders: fetchHeaders},
            ),
          ),
        ),
      ) as _i5.Future<_i4.ImageMetadata>);

  @override
  _i5.Future<List<_i4.ImageMetadata>> analyzeMultiple(
    List<String>? imageUrls, {
    String? sourceDomain,
    bool? fetchHeaders = true,
    int? concurrentRequests = 3,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeMultiple,
          [imageUrls],
          {
            #sourceDomain: sourceDomain,
            #fetchHeaders: fetchHeaders,
            #concurrentRequests: concurrentRequests,
          },
        ),
        returnValue: _i5.Future<List<_i4.ImageMetadata>>.value(
          <_i4.ImageMetadata>[],
        ),
      ) as _i5.Future<List<_i4.ImageMetadata>>);

  @override
  Map<String, int?> detectDimensionsFromUrl(String? imageUrl) =>
      (super.noSuchMethod(
        Invocation.method(#detectDimensionsFromUrl, [imageUrl]),
        returnValue: <String, int?>{},
      ) as Map<String, int?>);

  @override
  List<String> generateResponsiveImageUrls(
    _i4.ImageMetadata? metadata, {
    List<Map<String, int>>? sizes = const [
      {'width': 320},
      {'width': 640},
      {'width': 1024},
      {'width': 1600},
    ],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateResponsiveImageUrls,
          [metadata],
          {#sizes: sizes},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MetadataCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockMetadataCache extends _i1.Mock implements _i10.MetadataCache {
  MockMetadataCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i11.LinkMetadata?> get(String? url) => (super.noSuchMethod(
        Invocation.method(#get, [url]),
        returnValue: _i5.Future<_i11.LinkMetadata?>.value(),
      ) as _i5.Future<_i11.LinkMetadata?>);

  @override
  _i5.Future<void> put(
    String? url,
    _i11.LinkMetadata? metadata, {
    int? ttlMs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#put, [url, metadata], {#ttlMs: ttlMs}),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> remove(String? url) => (super.noSuchMethod(
        Invocation.method(#remove, [url]),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(#clear, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> removeExpired() => (super.noSuchMethod(
        Invocation.method(#removeExpired, []),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}
